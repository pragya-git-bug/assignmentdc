Assignment 29th May

Answer1
package divideAndConquerAssignment;

import java.util.Arrays;

import divideAndConquerClass.MergeSort;

/*Q1. Given an array where all its elements are sorted in increasing order except two swapped
elements, sort it in linear time. Assume there are no duplicates in the array.
input : arr[] = [3, 8, 6, 7, 5, 9, 10]
output : arr[] = [3, 5, 6, 7, 8, 9, 10]*/

public class Q1 {
	public static void main(String[] args) {
		int arr[] = { 3, 8, 6, 7, 5, 9, 10 };
		sortArray(arr);
		System.out.println(Arrays.toString(arr));
	}

	private static void sortArray(int[] arr) {
		int n = arr.length;
		int[] result = mergeSort(arr, 0, n - 1);
		for (int i = 0; i < n; i++)
			arr[i] = result[i];
	}

	private static int[] mergeSort(int[] arr, int low, int high) {
		// Base case- If subarray has only one element return it
		if (low == high) {
			int[] basecase = { arr[low] };
			return basecase;
		}

		// divide subarray into two halfs
		int mid = (low + high) / 2;
		int[] left = mergeSort(arr, low, mid); // sort left half
		int[] right = mergeSort(arr, mid + 1, high); // sort right half
		int[] merged = merge(left, right); // merger both halfs
		return merged;
	}

	private static int[] merge(int[] left, int[] right) {
		int m = left.length;
		int n = right.length;
		int[] merged = new int[m + n];
		int i = 0, j = 0, k = 0;

		// Merge the two sorted subarrays into one
		while (i < m && j < n) {
			if (left[i] <= right[j]) {
				merged[k] = left[i];
				i++;
			} else {
				merged[k] = right[j];
				j++;
			}
			k++;
		}

		// copying remaining elements from left subarray
		while (i < m)
			merged[k++] = left[i++];

		// copying remaining elements from right subarray
		while (j < n)
			merged[k++] = right[j++];

		return merged;
	}
}

Answer2
package divideAndConquerAssignment;

import java.util.Arrays;

/*Q2. Given an array of positive and negative integers, segregate them in 
 * linear time and constant space. The output should print all negative 
 * numbers, followed by all positive numbers.
 * (segregate means seperate)
i/p : arr[] = {19, -20, 7, -4, -13, 11, -5, 3}
o/p : arr[] = {-20 ,-4, -13, -5, 19 ,11 ,3, 7}*/
public class Q2 {
	public static void main(String[] args) {
		int arr[] = { 19, -20, 7, -4, -13, 11, -5, 3 };
		segregateNegativePositive(arr);
		System.out.println(Arrays.toString(arr));
	}

	//function to print negative numbers before positive numbers
	private static void segregateNegativePositive(int[] arr) {
		int left = 0; // leftmost pointer
		int right = arr.length - 1; // rightmost pointer

		while (left <= right) {

			// move left pointer untill we reach positive number
			while (left <= right && arr[left] < 0)
				left++;

			// move right pointer untill we reach negative number
			while (left <= right && arr[right] > 0)
				right--;

			// swap positive number at left with negative at right
			if (left < right) {
				int temp = arr[left];
				arr[left] = arr[right];
				arr[right] = temp;
			}
		}
	}
}

Answer3
package divideAndConquerAssignment;

import java.util.Arrays;

/*Q3. Given an array of positive and negative integers, segregate them in linear time and constant
space. The output should print all negative numbers, followed by all positive numbers. The
relative order of elements must remain the same.
i/p : arr[] = {19, -20, 7, -4, -13, 11, -5, 3}
o/p : arr[] = {-20 ,-4, -13, -5, 19 ,7 ,11, 3}*/
public class Q3 {
	public static void main(String[] args) {
		int arr[] = { 19, -20, 7, -4, -13, 11, -5, 3 };
		divideAndConquer(arr, 0, arr.length - 1);
		System.out.println(Arrays.toString(arr));
	}

	private static void divideAndConquer(int[] arr, int low, int high) {
		if (low < high) {
			int mid = (low + high) / 2;

			// divide array into two halfs
			divideAndConquer(arr, low, mid);
			divideAndConquer(arr, mid + 1, high);

			// merge sorted halfs
			merge(arr, low, mid, high);
		}
	}

	private static void merge(int[] arr, int low, int mid, int high) {
		int n1 = mid - low + 1;
		int n2 = high - mid;

		// temporary arrays to store elements
		int[] left = new int[n1];
		int[] right = new int[n2];

		// copyelements from original arrays to temporary arrays
		for (int i = 0; i < n1; i++)
			left[i] = arr[low + i];

		for (int i = 0; i < n2; i++)
			right[i] = arr[mid + 1 + i];

		int i = 0, j = 0, k = low;

		// merge negative elementrs from left sub-array
		while (i < n1 && left[i] < 0)
			arr[k++] = left[i++];

		// merge negative elements from right sub-array
		while (j < n2 && right[j] < 0)
			arr[k++] = right[j++];

		// merge positive elements from left sub-array
		while (i < n1 && left[i] > 0)
			arr[k++] = left[i++];

		// merge positive elements from right sub-array
		while (j < n2 && right[j] > 0)
			arr[k++] = right[j++];
	}

}

Answer4
package divideAndConquerAssignment;

import java.util.Arrays;

/*Q4. Given two arrays of equal size n and an integer k. The task is to permute both arrays such
that the sum of their corresponding element is greater than or equal to k i.e a[i] + b[i] >= k. The
task is to print “Yes” if any such permutation exists, otherwise print “No”.
i/p : a[] = {2, 1, 3},
b[] = { 7, 8, 9 },
k = 10.
o/p : Yes

i/p : a[] = {1, 2, 2, 1},
b[] = { 3, 3, 3, 4 },
k = 5.
o/p : No*/
public class Q4 {
	public static void main(String[] args) {
		int a[] = { 2, 1, 3 };
		int b[] = { 7, 8, 9 };
		int k = 10;

		String result = checkPermutation(a, b, k);
		System.out.println(result);
	}

	private static String checkPermutation(int[] a, int[] b, int k) {
		int n = a.length - 1;
		// sort both array
		Arrays.sort(a);
		Arrays.sort(b);

		// check for permutation who satisfy the condition
		for (int i = 0; i < n; i++) {
			if (a[i] + b[n - i] < k) {
				return "No";
			}
		}
		return "Yes";
	}
}

Answer5
package divideAndConquerAssignment;

import java.util.Arrays;

/*Q5. An interval is represented as a combination of start time and end time. Given a set of
intervals, check if any two intervals intersect.
i/p : arr[] = {{1, 3}, {5, 7}, {2, 4}, {6, 8}}
o/p : Yes . The intervals {1, 3} and {2, 4} overlap
*/
public class Q5 {
	public static void main(String[] args) {
		int arr[][] = { { 1, 3 }, { 5, 7 }, { 2, 4 }, { 6, 8 } };

		String resultString = checkIntervalsIntersection(arr) ? "Yes" : "No ";
		System.out.println(resultString);
	}

	private static boolean checkIntervalsIntersection(int[][] arr) {

		// first sort the array based on start index
		Arrays.sort(arr, (a, b) -> a[0] - b[0]);
		
		//loop to check intersection
		for(int i=0 ; i<arr.length ; i++) {
			if (arr[i][1] >= arr[i+1][0]) {
				return true;
			}
		}
		return false;
	}
}